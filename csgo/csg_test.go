package csgo

import (
	"fmt"
	"math/rand"
	"sort"
	"strings"
	"testing"
)

const (
	UNION = `[-1500,-3000,-2500|-3000,-3000,-5000|3000,-3000,-5000]/[-1500,-3000,-2500|3000,-3000,-5000|3000,-3000,-2500]/[-1500,3000,2500|-3000,3000,5000|3000,3000,5000]/[-1500,3000,2500|3000,3000,5000|3000,3000,2500]/[-3000,-1500,-2500|-3000,-3000,-5000|-3000,-3000,-2500]/[-3000,-3000,-2500|-5000,-3000,-2500|-5000,3000,-2500]/[-3000,-3000,-2500|-5000,-5000,-2500|-5000,-3000,-2500]/[-3000,-3000,-2500|-5000,3000,-2500|-3000,3000,-2500]/[-3000,-3000,-5000|-1500,-3000,-2500|-3000,-3000,-2500]/[-3000,-3000,-5000|-3000,-1500,-2500|-3000,3000,-2500]/[-3000,-3000,-5000|-3000,3000,-2500|-3000,3000,-5000]/[-3000,-3000,-5000|3000,3000,-5000|3000,-3000,-5000]/[-3000,1500,2500|-3000,3000,5000|-3000,3000,2500]/[-3000,3000,2500|-5000,-3000,2500|-3000,-3000,2500]/[-3000,3000,2500|-5000,3000,2500|-5000,-3000,2500]/[-3000,3000,2500|-5000,5000,2500|-5000,3000,2500]/[-3000,3000,5000|-1500,3000,2500|-3000,3000,2500]/[-3000,3000,5000|-3000,-3000,2500|-3000,-3000,5000]/[-3000,3000,5000|-3000,1500,2500|-3000,-3000,2500]/[-3000,3000,5000|3000,-3000,5000|3000,3000,5000]/[-5000,-3000,-1500|-5000,-5000,-2500|-5000,-5000,2500]/[-5000,-3000,-1500|-5000,-5000,2500|-5000,-3000,2500]/[-5000,-3000,-1500|-5000,3000,-2500|-5000,-3000,-2500]/[-5000,-3000,-1500|-5000,3000,1500|-5000,3000,-2500]/[-5000,-5000,-2500|-3000,-3000,-2500|5000,-3000,-2500]/[-5000,-5000,-2500|-5000,-3000,-1500|-5000,-3000,-2500]/[-5000,-5000,-2500|5000,-3000,-2500|5000,-5000,-2500]/[-5000,-5000,-2500|5000,-5000,2500|-5000,-5000,2500]/[-5000,3000,1500|-5000,-3000,-1500|-5000,-3000,2500]/[-5000,3000,1500|-5000,-3000,2500|-5000,3000,2500]/[-5000,3000,1500|-5000,5000,-2500|-5000,3000,-2500]/[-5000,3000,1500|-5000,5000,2500|-5000,5000,-2500]/[-5000,5000,2500|-3000,3000,2500|5000,3000,2500]/[-5000,5000,2500|-5000,3000,1500|-5000,3000,2500]/[-5000,5000,2500|5000,3000,2500|5000,5000,2500]/[-5000,5000,2500|5000,5000,-2500|-5000,5000,-2500]/[1500,-3000,2500|-3000,-3000,5000|-3000,-3000,2500]/[1500,-3000,2500|3000,-3000,5000|-3000,-3000,5000]/[1500,3000,-2500|-3000,3000,-5000|-3000,3000,-2500]/[1500,3000,-2500|3000,3000,-5000|-3000,3000,-5000]/[3000,-1500,2500|3000,-3000,5000|3000,-3000,2500]/[3000,-3000,2500|5000,-3000,2500|5000,3000,2500]/[3000,-3000,2500|5000,-5000,2500|5000,-3000,2500]/[3000,-3000,2500|5000,3000,2500|3000,3000,2500]/[3000,-3000,5000|-3000,3000,5000|-3000,-3000,5000]/[3000,-3000,5000|1500,-3000,2500|3000,-3000,2500]/[3000,-3000,5000|3000,-1500,2500|3000,3000,2500]/[3000,-3000,5000|3000,3000,2500|3000,3000,5000]/[3000,1500,-2500|3000,3000,-5000|3000,3000,-2500]/[3000,3000,-2500|5000,-3000,-2500|3000,-3000,-2500]/[3000,3000,-2500|5000,3000,-2500|5000,-3000,-2500]/[3000,3000,-2500|5000,5000,-2500|5000,3000,-2500]/[3000,3000,-5000|-3000,-3000,-5000|-3000,3000,-5000]/[3000,3000,-5000|1500,3000,-2500|3000,3000,-2500]/[3000,3000,-5000|3000,-3000,-2500|3000,-3000,-5000]/[3000,3000,-5000|3000,1500,-2500|3000,-3000,-2500]/[5000,-3000,1500|5000,-5000,-2500|5000,-3000,-2500]/[5000,-3000,1500|5000,-5000,2500|5000,-5000,-2500]/[5000,-3000,1500|5000,3000,-1500|5000,3000,2500]/[5000,-3000,1500|5000,3000,2500|5000,-3000,2500]/[5000,-5000,2500|-5000,-3000,2500|-5000,-5000,2500]/[5000,-5000,2500|-5000,-5000,-2500|5000,-5000,-2500]/[5000,-5000,2500|3000,-3000,2500|-5000,-3000,2500]/[5000,-5000,2500|5000,-3000,1500|5000,-3000,2500]/[5000,3000,-1500|5000,-3000,-2500|5000,3000,-2500]/[5000,3000,-1500|5000,-3000,1500|5000,-3000,-2500]/[5000,3000,-1500|5000,5000,-2500|5000,5000,2500]/[5000,3000,-1500|5000,5000,2500|5000,3000,2500]/[5000,5000,-2500|-5000,3000,-2500|-5000,5000,-2500]/[5000,5000,-2500|-5000,5000,2500|5000,5000,2500]/[5000,5000,-2500|3000,3000,-2500|-5000,3000,-2500]/[5000,5000,-2500|5000,3000,-1500|5000,3000,-2500]`

	DIFF = `[-3000,-3000,-2500|-3000,-3000,2500|1500,-3000,2500]/[-3000,-3000,-2500|-5000,-5000,-2500|-5000,-3000,-2500]/[-3000,-3000,-2500|1500,-3000,2500|-1500,-3000,-2500]/[-3000,-3000,2500|-3000,-1500,-2500|-3000,1500,2500]/[-3000,-3000,2500|-3000,-3000,-2500|-3000,-1500,-2500]/[-3000,-3000,2500|-3000,3000,2500|-5000,3000,2500]/[-3000,-3000,2500|-5000,3000,2500|-5000,-3000,2500]/[-3000,3000,-2500|-3000,-3000,-2500|-5000,-3000,-2500]/[-3000,3000,-2500|-3000,1500,2500|-3000,-1500,-2500]/[-3000,3000,-2500|-3000,3000,2500|-3000,1500,2500]/[-3000,3000,-2500|-5000,-3000,-2500|-5000,3000,-2500]/[-3000,3000,2500|-3000,3000,-2500|1500,3000,-2500]/[-3000,3000,2500|-5000,5000,2500|-5000,3000,2500]/[-3000,3000,2500|1500,3000,-2500|-1500,3000,2500]/[-5000,-3000,-2500|-5000,-5000,-2500|-5000,-3000,-1500]/[-5000,-3000,2500|-5000,-3000,-1500|-5000,-5000,-2500]/[-5000,-3000,2500|-5000,-5000,-2500|-5000,-5000,2500]/[-5000,-3000,2500|-5000,3000,1500|-5000,-3000,-1500]/[-5000,-3000,2500|-5000,3000,2500|-5000,3000,1500]/[-5000,-5000,-2500|3000,-5000,1500|3000,-5000,2500]/[-5000,-5000,-2500|3000,-5000,2500|-5000,-5000,2500]/[-5000,3000,-2500|-5000,-3000,-1500|-5000,3000,1500]/[-5000,3000,-2500|-5000,-3000,-2500|-5000,-3000,-1500]/[-5000,3000,-2500|-5000,3000,1500|-5000,5000,2500]/[-5000,3000,-2500|-5000,5000,2500|-5000,5000,-2500]/[-5000,3000,2500|-5000,5000,2500|-5000,3000,1500]/[-5000,5000,2500|3000,5000,-1500|3000,5000,-2500]/[-5000,5000,2500|3000,5000,-2500|-5000,5000,-2500]/[3000,-3000,-2500|-5000,-5000,-2500|-3000,-3000,-2500]/[3000,-3000,-2500|3000,-1500,2500|3000,1500,-2500]/[3000,-3000,-2500|3000,-3000,2500|3000,-1500,2500]/[3000,-3000,-2500|3000,-5000,-2500|-5000,-5000,-2500]/[3000,-3000,2500|-1500,-3000,-2500|1500,-3000,2500]/[3000,-3000,2500|3000,-3000,-2500|-1500,-3000,-2500]/[3000,-5000,-2500|3000,3000,-2500|5000,5000,-2500]/[3000,-5000,-2500|5000,5000,-2500|5000,-5000,-2500]/[3000,-5000,1500|-5000,-5000,-2500|3000,-5000,-2500]/[3000,-5000,1500|5000,-5000,2500|3000,-5000,2500]/[3000,-5000,2500|-5000,-3000,2500|-5000,-5000,2500]/[3000,-5000,2500|3000,-3000,2500|-5000,-3000,2500]/[3000,-5000,2500|5000,-5000,2500|3000,-3000,2500]/[3000,3000,-2500|-1500,3000,2500|1500,3000,-2500]/[3000,3000,-2500|3000,3000,2500|-1500,3000,2500]/[3000,3000,2500|-5000,5000,2500|-3000,3000,2500]/[3000,3000,2500|3000,1500,-2500|3000,-1500,2500]/[3000,3000,2500|3000,3000,-2500|3000,1500,-2500]/[3000,3000,2500|3000,5000,2500|-5000,5000,2500]/[3000,5000,-1500|-5000,5000,2500|3000,5000,2500]/[3000,5000,-1500|5000,5000,-2500|3000,5000,-2500]/[3000,5000,-2500|-5000,3000,-2500|-5000,5000,-2500]/[3000,5000,-2500|3000,3000,-2500|-5000,3000,-2500]/[3000,5000,-2500|5000,5000,-2500|3000,3000,-2500]/[3000,5000,2500|3000,-3000,2500|5000,-5000,2500]/[3000,5000,2500|5000,-5000,2500|5000,5000,2500]/[5000,-5000,2500|3000,-5000,-2500|5000,-5000,-2500]/[5000,-5000,2500|3000,-5000,1500|3000,-5000,-2500]/[5000,-5000,2500|5000,5000,-2500|5000,5000,2500]/[5000,5000,-2500|3000,5000,-1500|3000,5000,2500]/[5000,5000,-2500|3000,5000,2500|5000,5000,2500]/[5000,5000,-2500|5000,-5000,2500|5000,-5000,-2500]`

	INTER = `[-1500,-3000,-2500|-3000,-3000,2500|-3000,-3000,-2500]/[-1500,-3000,-2500|1500,-3000,2500|-3000,-3000,2500]/[-1500,3000,2500|-3000,3000,-2500|-3000,3000,2500]/[-1500,3000,2500|1500,3000,-2500|-3000,3000,-2500]/[-3000,-1500,-2500|-3000,1500,2500|-3000,3000,2500]/[-3000,-1500,-2500|-3000,3000,2500|-3000,3000,-2500]/[-3000,-3000,2500|3000,-3000,2500|-3000,3000,2500]/[-3000,1500,2500|-3000,-1500,-2500|-3000,-3000,-2500]/[-3000,1500,2500|-3000,-3000,-2500|-3000,-3000,2500]/[-3000,3000,-2500|3000,3000,-2500|-3000,-3000,-2500]/[1500,-3000,2500|-1500,-3000,-2500|3000,-3000,-2500]/[1500,-3000,2500|3000,-3000,-2500|3000,-3000,2500]/[1500,3000,-2500|-1500,3000,2500|3000,3000,2500]/[1500,3000,-2500|3000,3000,2500|3000,3000,-2500]/[3000,-1500,2500|3000,1500,-2500|3000,3000,-2500]/[3000,-1500,2500|3000,3000,-2500|3000,3000,2500]/[3000,-3000,-2500|-3000,-3000,-2500|3000,3000,-2500]/[3000,1500,-2500|3000,-1500,2500|3000,-3000,2500]/[3000,1500,-2500|3000,-3000,2500|3000,-3000,-2500]/[3000,3000,2500|-3000,3000,2500|3000,-3000,2500]`
)

func faceToString(f *Face) string {
	return fmt.Sprintf("[%d,%d,%d|%d,%d,%d|%d,%d,%d]",
				int(f.Vertices[0].Position.X() * 1000), int(f.Vertices[0].Position.Y() * 1000), int(f.Vertices[0].Position.Z() * 1000),
				int(f.Vertices[1].Position.X() * 1000), int(f.Vertices[1].Position.Y() * 1000), int(f.Vertices[1].Position.Z() * 1000),
				int(f.Vertices[2].Position.X() * 1000), int(f.Vertices[2].Position.Y() * 1000), int(f.Vertices[2].Position.Z() * 1000))
}

func modelToString(m *Model) string {
	arr := make([]string, 0)
	for _, f := range m.Faces {
		arr = append(arr, faceToString(f))
	}

	sort.Strings(arr)

	return strings.Join(arr, "/")
}

func TestSimpleObjects(t *testing.T) {
	cube := modelToString(NewCube(2.0, 4.0, 6.0))
	if cube != "[-1000,-2000,-3000|-1000,2000,3000|-1000,2000,-3000]/[-1000,-2000,-3000|1000,-2000,3000|-1000,-2000,3000]/[-1000,-2000,-3000|1000,2000,-3000|1000,-2000,-3000]/[-1000,2000,3000|-1000,-2000,-3000|-1000,-2000,3000]/[-1000,2000,3000|1000,-2000,3000|1000,2000,3000]/[-1000,2000,3000|1000,2000,-3000|-1000,2000,-3000]/[1000,-2000,3000|-1000,-2000,-3000|1000,-2000,-3000]/[1000,-2000,3000|-1000,2000,3000|-1000,-2000,3000]/[1000,-2000,3000|1000,2000,-3000|1000,2000,3000]/[1000,2000,-3000|-1000,-2000,-3000|-1000,2000,-3000]/[1000,2000,-3000|-1000,2000,3000|1000,2000,3000]/[1000,2000,-3000|1000,-2000,3000|1000,-2000,-3000]" {
		t.Errorf("Cube test failed: %s", cube)
	}

	sphere := modelToString(NewSphere(5.0, 4, 3))
	if sphere != "[-4330,-2500,0|0,-2500,-4330|0,-5000,0]/[-4330,2499,0|0,-2500,-4330|-4330,-2500,0]/[-4330,2499,0|0,2499,-4330|0,-2500,-4330]/[0,-2500,-4330|4330,-2500,0|0,-5000,0]/[0,-2500,4330|-4330,-2500,0|0,-5000,0]/[0,2499,-4330|4330,-2500,0|0,-2500,-4330]/[0,2499,-4330|4330,2499,0|4330,-2500,0]/[0,2499,4330|-4330,-2500,0|0,-2500,4330]/[0,2499,4330|-4330,2499,0|-4330,-2500,0]/[0,5000,0|-4330,2499,0|0,2499,4330]/[0,5000,0|0,2499,-4330|-4330,2499,0]/[0,5000,0|0,2499,4330|4330,2499,0]/[0,5000,0|4330,2499,0|0,2499,-4330]/[4330,-2500,0|0,-2500,4330|0,-5000,0]/[4330,2499,0|0,-2500,4330|4330,-2500,0]/[4330,2499,0|0,2499,4330|0,-2500,4330]" {
		t.Errorf("Sphere test failed: %s", sphere)
	}

	cylinder := modelToString(NewCylinder(10, 5, 15, 4))
	if cylinder != "[-10000,0,0|0,-10000,0|0,-9916,3750]/[-10000,0,0|0,-9916,3750|-9916,0,3750]/[-10000,0,0|0,10000,0|0,0,0]/[-9750,0,11250|0,-9666,15000|-9666,0,15000]/[-9750,0,11250|0,-9750,11250|0,-9666,15000]/[-9833,0,7500|0,-9750,11250|-9750,0,11250]/[-9833,0,7500|0,-9833,7500|0,-9750,11250]/[-9916,0,3750|0,-9833,7500|-9833,0,7500]/[-9916,0,3750|0,-9916,3750|0,-9833,7500]/[0,-10000,0|-10000,0,0|0,0,0]/[0,-10000,0|10000,0,0|9916,0,3750]/[0,-10000,0|9916,0,3750|0,-9916,3750]/[0,-9750,11250|9666,0,15000|0,-9666,15000]/[0,-9750,11250|9750,0,11250|9666,0,15000]/[0,-9833,7500|9750,0,11250|0,-9750,11250]/[0,-9833,7500|9833,0,7500|9750,0,11250]/[0,-9916,3750|9833,0,7500|0,-9833,7500]/[0,-9916,3750|9916,0,3750|9833,0,7500]/[0,0,15000|-5000,0,15000|0,-5000,15000]/[0,0,15000|0,-5000,15000|5000,0,15000]/[0,0,15000|0,5000,15000|-5000,0,15000]/[0,0,15000|5000,0,15000|0,5000,15000]/[0,10000,0|-10000,0,0|-9916,0,3750]/[0,10000,0|-9916,0,3750|0,9916,3750]/[0,10000,0|10000,0,0|0,0,0]/[0,9750,11250|-9666,0,15000|0,9666,15000]/[0,9750,11250|-9750,0,11250|-9666,0,15000]/[0,9833,7500|-9750,0,11250|0,9750,11250]/[0,9833,7500|-9833,0,7500|-9750,0,11250]/[0,9916,3750|-9833,0,7500|0,9833,7500]/[0,9916,3750|-9916,0,3750|-9833,0,7500]/[10000,0,0|0,-10000,0|0,0,0]/[10000,0,0|0,10000,0|0,9916,3750]/[10000,0,0|0,9916,3750|9916,0,3750]/[9750,0,11250|0,9666,15000|9666,0,15000]/[9750,0,11250|0,9750,11250|0,9666,15000]/[9833,0,7500|0,9750,11250|9750,0,11250]/[9833,0,7500|0,9833,7500|0,9750,11250]/[9916,0,3750|0,9833,7500|9833,0,7500]/[9916,0,3750|0,9916,3750|0,9833,7500]" {
		t.Errorf("Cylinder test failed: %s", cylinder)
	}
}

func TestCsg(t *testing.T) {
	rand.Seed(65537)

	obj1 := NewCube(10.0, 10.0, 5.0)
	obj2 := NewCube(6.0, 6.0, 10.0)

	union := modelToString(obj1.Join(obj2))
	if union != UNION {
		t.Errorf("Union test failed: %s != %s", union, UNION)
	}

	diff := modelToString(obj1.Subtract(obj2))
	if diff != DIFF {
		t.Errorf("Difference test failed: %s != %s", diff, DIFF)
	}

	inter := modelToString(obj1.Intersect(obj2))
	if inter != INTER {
		t.Errorf("Intersection test failed: %s != %s", inter, INTER)
	}

}
